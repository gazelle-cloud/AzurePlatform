name: template - monitoring

on:
  workflow_call:
    inputs:
        managementGroupHierarchy:
          required: true
          type: string

jobs:
    logAnalytics:
        runs-on: ${{ vars.RUNNER_IMAGE }}
        environment: ${{ inputs.managementGroupHierarchy }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_AZUREPLATFORM_ID }}
            private-key: ${{ secrets.APP_GITHUB_AZUREPLATFORM_KEY }}
            owner: ${{ github.repository_owner }}
            

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.GAZELLE_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: logAnalytics
          uses: azure/cli@v2
          with:
            azcliversion: ${{ vars.AZURE_CLI_VERSION }}
            inlineScript: |
              az account set --subscription ${{ vars.MANAGEMENT_SUBSCRIPTION_ID }}

              deployment=$(az stack sub create \
                --name monitor-logAnalytics \
                --location ${{ vars.AZURE_DEFAULT_LOCATION }} \
                --template-file './src/monitoring/main.bicep' \
                --parameters './parameters/monitoring/main.bicepparam' \
                --parameters environment=${{ inputs.managementGroupHierarchy }} \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)

              envVariables=$(echo $deployment | jq '.outputs.gitHubEnviromentVariables.value')
              echo "Deployment Outputs: $envVariables"
              echo "monitoring=$(echo $envVariables | jq -c .)" >> $GITHUB_ENV
         
        - name: set env variables
          env:
            GH_TOKEN: ${{ steps.github-token.outputs.token }}
          run: |
              deploymentOutputs=$(echo $monitoring | jq .)
              echo "Deployment Outputs: $deploymentOutputs"
              
              keys=$(echo $deploymentOutputs | jq -r 'keys[]')
              for key in $keys; do
                value=$(echo $deploymentOutputs | jq --arg k "$key" -r '.[$k]')
                gh variable set $key \
                  --body "$value" \
                  --env ${{ inputs.managementGroupHierarchy }} \
                  -R "${{ github.repository_owner }}/AzurePlatform"
              done