name: template - Policy

on:
  workflow_call:
    inputs:
        managementGroupHierarchy:
          required: true
          type: string

jobs:
    definitions:
        runs-on: ubuntu-latest
        environment: ${{ inputs.managementGroupHierarchy }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_BIGBANG_ID }}
            private-key: ${{ secrets.APP_GITHUB_BIGBANG }}
            owner: ${{ github.repository_owner }}

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: identity
          uses: azure/cli@v2
          with:
              inlineScript: |
                deployment=$(az stack mg create \
                --name policy-Identity \
                --management-group-id ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
                --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
                --template-file ./policy/bicep/policyIdentity.bicep \
                --parameters './policy/parameters/policyIdentity.bicepparam' \
                --parameters location=${{  vars.AZURE_DEFAULT_LOCATION }} \
                --parameters environment=${{ inputs.managementGroupHierarchy }} \
                --parameters subscriptionId=${{ vars.MANAGEMENT_SUBSCRIPTION_ID }} \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)

                envVariables=$(echo $deployment | jq '.outputs.gitHubEnviromentVariables.value')
                echo "Deployment Outputs: $envVariables"
                echo "workloadIdentitiy=$(echo $envVariables | jq -c .)" >> $GITHUB_ENV

        - name: set env variables
          env:
            GH_TOKEN: ${{ steps.github-token.outputs.token }}
          run: |
              deploymentOutputs=$(echo $workloadIdentitiy | jq .)
              echo "Deployment Outputs: $deploymentOutputs"
              
              objects=$(echo $deploymentOutputs | jq -c '.[]')
              for obj in $objects; do
                keys=$(echo $obj | jq -r 'keys[]')
                for key in $keys; do
                  value=$(echo $obj | jq --arg k "$key" -r '.[$k]')
                  gh variable set $key \
                    --body "$value" \
                    --env ${{ inputs.managementGroupHierarchy }} \
                    -R "${{ github.repository_owner }}/AzurePlatform"
                done
              done

        - name: custom definitions
          uses: azure/cli@v2
          with:
              inlineScript: |
                deployment=$(az stack mg create \
                --name policy-customDefinitions \
                --management-group-id ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
                --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
                --template-file ./policy/parameters/customDefinitions/main.bicep \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)

    assignments:
        runs-on: ubuntu-latest
        needs: definitions
        environment: ${{ inputs.managementGroupHierarchy }}
        strategy:
          fail-fast: false
          matrix:
            policy:
              - foo
              - allowedLocations
              - allowedResourceTypes
            scope: 
              - online
              - platform
            
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: standard policies
          if: ${{ matrix.policy != 'foo' }}
          uses: azure/cli@v2
          with:
              inlineScript: |
                deployment=$(az stack mg create \
                --name policy-${{ matrix.policy }} \
                --management-group-id ${{ matrix.scope }}-${{ inputs.managementGroupHierarchy }} \
                --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
                --template-file ./policy/parameters/${{ matrix.policy }}/main.bicep \
                --parameters ./policy/parameters/${{ matrix.policy }}/${{ matrix.scope }}.bicepparam \
                --parameters location=${{  vars.AZURE_DEFAULT_LOCATION }} \
                --parameters identityResoruceId=${{  vars.POLICY_RESOURCE_ID }} \
                --parameters topLevelManagementGroupName=${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)

        - name: additional param (log analytics)
          if: ${{ matrix.policy == 'foo' }}
          uses: azure/cli@v2
          with:
              inlineScript: |
                deployment=$(az stack mg create \
                --name policy-${{ matrix.policy }} \
                --management-group-id ${{ matrix.scope }}-${{ inputs.managementGroupHierarchy }} \
                --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
                --template-file ./policy/parameters/${{ matrix.policy }}/main.bicep \
                --parameters ./policy/parameters/${{ matrix.policy }}/${{ matrix.scope }}.bicepparam \
                --parameters location=${{  vars.AZURE_DEFAULT_LOCATION }} \
                --parameters identityResoruceId=${{  vars.POLICY_RESOURCE_ID }} \
                --parameters logAnalytics=${{ vars.LOGANALYTICS_RESOURCE_ID }} \
                --parameters topLevelManagementGroupName=${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)