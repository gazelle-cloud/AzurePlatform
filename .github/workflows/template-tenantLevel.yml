name: template - tenant level deployment

on:
  workflow_call:
    inputs:
        managementGroupHierarchy:
            required: true
            type: string

env:
  topLevelManagementGroupId: /providers/Microsoft.Management/managementGroups/${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }}

jobs:
    FetchRoleDefinitions:
        runs-on: ubuntu-latest
        environment: ${{ inputs.managementGroupHierarchy }}
        steps:
        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_AZUREPLATFORM_ID }}
            private-key: ${{ secrets.APP_GITHUB_AZUREPLATFORM_KEY }}   

        - uses: actions/checkout@v4
          with:
            token: ${{ steps.github-token.outputs.token }}

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: true

        - name: fetch role definitions
          uses: azure/powershell@v2
          with:
            azPSVersion: "latest"
            inlineScript: |
              ./.github/utils/get-AzureRoleDefinitions.ps1

        - name: push role definitions
          run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "fetch azure role definitions"
            git push

    ManagementGroups:
        runs-on: ubuntu-latest
        environment: ${{ inputs.managementGroupHierarchy }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: management group hierarchy
          uses: azure/cli@v2
          with:
            inlineScript: |
              az stack mg create \
              --name tennatLevel-managementGroups \
              --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
              --management-group-id ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
              --template-file ./tenantLevel/bicep/managementGroups.bicep \
              --parameters ./tenantLevel/parameters/managementGroups.bicepparam \
              --parameters environment=${{ inputs.managementGroupHierarchy }} \
              --parameters topLevelManagementGroupName=${{ env.topLevelManagementGroupId }} \
              --deny-settings-mode None \
              --action-on-unmanage deleteAll \
              --yes

    Billing:
        if: ${{ inputs.managementGroupHierarchy == 'prod' }}
        runs-on: ubuntu-latest
        environment: prod
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_AZUREPLATFORM_ID }}
            private-key: ${{ secrets.APP_GITHUB_AZUREPLATFORM_KEY }}
            owner: ${{ github.repository_owner }}

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: invoice sections
          uses: azure/cli@v2
          with:
            inlineScript: |
              deployment=$(az deployment mg create \
               --name InvoiceSections \
               --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
               --management-group-id ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
               --template-file ./tenantLevel/bicep/billing.bicep \
               --parameters ./tenantLevel/parameters/billing.bicepparam)

              envVariables=$(echo $deployment | jq '.properties.outputs.gitHubEnviromentVariables.value')
              echo "Deployment Outputs: $envVariables"
              echo "billing=$(echo $envVariables | jq -c .)" >> $GITHUB_ENV

        - name: set env variables
          env:
            GH_TOKEN: ${{ steps.github-token.outputs.token }}
          run: |
              deploymentOutputs=$(echo $billing | jq .)
              echo "Deployment Outputs: $deploymentOutputs"
              
              objects=$(echo $deploymentOutputs | jq -c '.[]')
              for obj in $objects; do
                keys=$(echo $obj | jq -r 'keys[]')
                for key in $keys; do
                  value=$(echo $obj | jq --arg k "$key" -r '.[$k]')
                  gh variable set $key \
                    --body "$value" \
                    -R "${{ github.repository_owner }}/landingzones"
                done
              done