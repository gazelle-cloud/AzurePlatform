name: Destory Azure platform

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod

permissions:
  id-token: write
  contents: read
  
jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      topLevelManagementGroup: ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }}
      managementSubscscriptionId: ${{ vars.MANAGEMENT_SUBSCRIPTION_ID }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID}}
        allow-no-subscriptions: true
        enable-AzPSSession: true

    - name: reset hierarchy settings
      uses: azure/powershell@v2
      if: ${{ inputs.environment == 'prod' }}
      with:
        azPSVersion: "latest"
        inlineScript: |
          $params = @{
            GroupName = '${{ vars.AZURE_TENANT_ID }}'
            DefaultManagementGroup = '/providers/Microsoft.Management/managementGroups/${{ vars.AZURE_TENANT_ID}}'
            Authorization = $false
          }
          write-output $params
          new-azManagementGroupHierarchySetting @params

    - name: move subscriptions
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $params = @{
            managementGroup = '${{ env.topLevelManagementGroup }}'
          }
          write-output $params
          ./.github/destoryPlatform/move-subscriptions.ps1 @params

    - name: remove management group
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $params = @{
            managementGroup = '${{ env.topLevelManagementGroup }}'
          }
          write-output $params
          ./.github/destoryPlatform/remove-managementGroups.ps1 @params

    - name: cleanup deployment history
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $deploymants =Get-AzManagementGroupDeployment -ManagementGroupId '${{ env.topLevelManagementGroup }}'
          $deploymants.Count
          $deploymants | foreach-object -ThrottleLimit 25 -Parallel {
              Remove-AzManagementGroupDeployment -Id $_.Id -verbose
          }

    - name: delete deployment stacks
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $params = @{
            managementSubscscriptionId  = '${{ env.managementSubscscriptionId }}'
            topLevelManagementGroupName = '${{ env.topLevelManagementGroup }}'
          }
          write-output $params
          ./.github/destoryPlatform/remove-deploymentStacks.ps1 @params
    

    # - name: remove RBAC
    #   uses: azure/powershell@v2
    #   with:
    #     azPSVersion: "latest"
    #     inlineScript: |
    #       get-AzRoleAssignment -scope '/providers/Microsoft.Management/managementGroups/gazelle-test'
    #       $params = @{
    #         managementGroup = '${{ env.topLevelManagementGroup }}'
    #       }
    #       write-output $params
    #       ./.github/destoryPlatform/remove-rbacAssignments.ps1 @params
