name: Destory Azure platform

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod

permissions:
  id-token: write
  contents: read
  
jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      topLevelManagementGroup: ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }}
      managementSubscscriptionId: ${{ vars.MANAGEMENT_SUBSCRIPTION_ID }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID}}
        allow-no-subscriptions: true
        enable-AzPSSession: true

    - name: delete deploymen stacks
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          Select-AzSubscription -subscriptionId '${{ env.managementSubscscriptionId }}'

          $stacks =  Get-AzSubscriptionDeploymentStack 
          Write-Output "deployment stacks to be deleted:"
          $stacks.name
          $stacks | foreach-object -ThrottleLimit 5 -Parallel {
              Remove-AzSubscriptionDeploymentStack -ResourceId $_.id -ActionOnUnmanage DeleteAll -Force
          }

    - name: move subscriptions
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $params = @{
            managementGroup = '${{ env.topLevelManagementGroup }}'
          }
          write-output $params
          ./.github/destoryPlatform/move-subscriptions.ps1 @params

    - name: remove management group
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $params = @{
            managementGroup = '${{ env.topLevelManagementGroup }}'
          }
          write-output $params
          ./.github/destoryPlatform/remove-managementGroups.ps1 @params

    - name: remove deployment
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          $deploymants =Get-AzManagementGroupDeployment -ManagementGroupId '${{ env.topLevelManagementGroup }}'
          $deploymants.Count
          $deploymants | foreach-object -ThrottleLimit 25 -Parallel {
              Remove-AzManagementGroupDeployment -Id $_.Id -verbose
          }

    - name: remove RBAC
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          get-AzRoleAssignment -scope '/providers/Microsoft.Management/managementGroups/gazelle-test'
          $params = @{
            managementGroup = '${{ env.topLevelManagementGroup }}'
          }
          write-output $params
          ./.github/destoryPlatform/remove-rbacAssignments.ps1 @params
