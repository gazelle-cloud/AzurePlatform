name: template - big bang

on:
  workflow_call:
    inputs:
        environment:
            required: true
            type: string
        managementGroupMainBicep:
            default: ./BigBang/bicep/main-managementGroups.bicep
            type: string
        managementGroupParameters:
            default: ./BigBang/parameters/managementGroups.bicepparam
            type: string
        AzureIdentityMainBicep:
            default: ./BigBang/bicep/main-identity.bicep
            type: string
        AzureIdentityParameters:
            default: ./BigBang/parameters/identity.bicepparam
            type: string
        deploymentName:
            default: bigBang
            type: string

env:
  topLevelManagementGroupId: /providers/Microsoft.Management/managementGroups/${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }}

jobs:
    bigBang:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}-BigBang
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_BIGBANG_ID }}
            private-key: ${{ secrets.APP_GITHUB_BIGBANG }}

        - name: Azure login
          uses: azure/login@v1
          with:
            client-id: ${{ vars.APP_AZURE_BIGBANG_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: Azure bigBang RBAC
          uses: azure/cli@v1
          with:
            inlineScript: |
              az role assignment create --assignee ${{ vars.APP_AZURE_BIGBANG_OBJECT_ID }} \
               --role "Management Group Contributor" \
               --scope ${{ env.topLevelManagementGroupId }}

               az role assignment create --assignee ${{ vars.APP_AZURE_BIGBANG_OBJECT_ID }} \
               --role "Hierarchy Settings Administrator" \
               --scope ${{ env.topLevelManagementGroupId }}

               az role assignment create --assignee ${{ vars.APP_AZURE_BIGBANG_OBJECT_ID }} \
               --role "Azure Deployment Stack Owner" \
               --scope ${{ env.topLevelManagementGroupId }}

               az role assignment create --assignee ${{ vars.APP_AZURE_BIGBANG_OBJECT_ID }} \
               --role "Contributor" \
               --scope /subscriptions/${{ vars.MANAGEMENT_SUBSCRIPTION_ID  }}

        - name: management group hierarchy
          uses: azure/cli@v1
          with:
            inlineScript: |
              az deployment mg create \
               --name ${{ inputs.deploymentName }}-${{ inputs.environment}} \
               --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
               --management-group-id ${{ vars.TOP_LEVEL_MANAGEMENTGROUP_NAME }} \
               --template-file ${{ inputs.managementGroupMainBicep }} \
               --parameters ${{ inputs.managementGroupParameters }} \
               --parameters environment=${{ inputs.environment }} \
               --parameters topLevelManagementGroupName=${{ env.topLevelManagementGroupId }} \
               --parameters managementSubscriptionId=${{ vars.MANAGEMENT_SUBSCRIPTION_ID }}

        - name: init AzureIdentity
          id: azureIdentity
          uses: azure/cli@v1
          with:
            inlineScript: |
              az account set --subscription ${{ vars.MANAGEMENT_SUBSCRIPTION_ID }}

              deployment=$(az stack sub create \
                --name identity-${{ inputs.environment}} \
                --location ${{  vars.AZURE_DEFAULT_LOCATION }} \
                --template-file ${{ inputs.AzureIdentityMainBicep }} \
                --parameters ${{ inputs.AzureIdentityParameters }} \
                --parameters environment=${{ inputs.environment }} \
                --parameters location=${{  vars.AZURE_DEFAULT_LOCATION }} \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)

              readOutputs=$(echo $deployment | jq '.outputs')
              echo "Deployment Outputs: $readOutputs"
              keyValuePairs=$(echo $readOutputs | jq -r 'to_entries[] | "\(.key)=\(.value.value)"')
              IFS=$'\n'
              for output in $keyValuePairs
              do
                echo $output
                echo "$output" >> $GITHUB_ENV
              done

        - name: AzureIdentity RBAC
          uses: azure/cli@v1
          with:
            inlineScript: |
              az role assignment create --assignee-object-id ${{ env.azureIdentityObjectId  }} \
                --role "Role Based Access Control Administrator" \
                --assignee-principal-type ServicePrincipal \
                --scope ${{ env.topLevelManagementGroupId }}

        - name: set env variables
          env:
            GH_TOKEN: ${{ steps.github-token.outputs.token }}
          run: |
              gh variable set AzureIdentity_client_Id \
              --body ${{ env.azureIdentityClientId }} \
              --env ${{ inputs.environment}}-Identity \
              -R gazelle-cloud/AzurePlatform