name: template - Langingzone

on:
  workflow_call:
    inputs:
        environment:
          default: prod
          type: string
        managementGroupName:
          required: true
          type: string
        managementGroupSuffix:
            required: true
            type: string
        location:
            default: ${{ vars.AZURE_DEFAULT_LOCATION }}
            type: string
        deploymentInputsMainBicep:
            default: ./Landingzone/bicep/main-inputs.bicep
            type: string
        mainBicep:
            default: ./Landingzone/bicep/main.bicep
            type: string
        parameterFile:
            required: true
            type: string
    

jobs:
    Langingzone:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}-azurePlatform
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_BIGBANG_ID }}
            private-key: ${{ secrets.APP_GITHUB_BIGBANG }}

        - name: Azure login
          uses: azure/login@v1
          with:
            client-id: ${{ vars.APP_AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID}}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: fetch JSON values
          uses: azure/cli@v1
          with:
            inlineScript: |
                params=$(jq -r 'to_entries[] | "\(.key)=\(.value)"' ${{ inputs.parameterFile }})
                IFS=$'\n'
                for item in $params
                do
                  echo $item
                  echo "$item" >> $GITHUB_ENV
                done  
        
        - name: manipulate values
          run: |
            echo "mgmtPreffix=$(echo ${{ env.managementGroupName }} | cut -d'-' -f1)" >> $GITHUB_ENV

        - name: create subscription
          if: ${{ env.subscriptionId == null }}
          uses: azure/cli@v1
          with:
              inlineScript: |
                params=$(jq -c . < ${{ inputs.parameterFile }})
                echo "JSON content: $params"
                
                deployment=$(az deployment mg create \
                --name "lz-${{ env.mgmtPreffix }}-${{ env.labName }}-${{ env.environment}}" \
                --management-group-id ${{ env.managementGroupName }} \
                --location ${{ inputs.location }} \
                --template-file './Landingzone/bicep/modules/aliases.bicep' \
                --parameters subscriptionName="${{ env.labName }}-${{ env.environment}}" \
                --parameters billingScope=${{  secrets.BILLINGPROFILES_PLATFORM }})

                readOutputs=$(echo $deployment | jq '.properties.outputs')
                echo "Deployment Outputs: $readOutputs"
                keyValuePairs=$(echo $readOutputs | jq -r 'to_entries[] | "\(.key)=\(.value.value)"')
                IFS=$'\n'
                for output in $keyValuePairs
                do
                  echo $output
                  echo "$output" >> $GITHUB_ENV
                done

        - name: move subscription
          uses: azure/cli@v1
          with:
              inlineScript: |
                az account management-group subscription add \
                  --name ${{ env.managementGroupName }} \
                  --subscription ${{ env.subscriptionId}}

        - name: create landingzone
          uses: azure/cli@v1
          with:
              inlineScript: |
                params=$(jq -c . < ${{ inputs.parameterFile }})
                echo "JSON content: $params"
                
                az account set --subscription ${{ env.subscriptionId }}

                deployment=$(az stack sub create \
                --name "landingzone-init" \
                --location ${{ inputs.location }} \
                --template-file ${{ inputs.mainBicep }} \
                --parameters params=$params \
                --deny-settings-mode None \
                --action-on-unmanage deleteAll \
                --yes)

                envVariables=$(echo $deployment | jq '.outputs.gitHubEnviromentVariables.value')
                echo "Deployment Outputs: $envVariables"
                echo "landingzoneInit=$(echo $envVariables | jq -c .)" >> $GITHUB_ENV

        - name: set env variables
          env:
            GH_TOKEN: ${{ steps.github-token.outputs.token }}
          run: |
              deploymentOutputs=$(echo $landingzoneInit | jq .)
              echo "Deployment Outputs: $deploymentOutputs"
              
              keys=$(echo $deploymentOutputs | jq -r 'keys[]')
              for key in $keys; do
                value=$(echo $deploymentOutputs | jq --arg k "$key" -r '.[$k]')
                gh variable set $key \
                  --body "$value" \
                  --env "${{ env.environment }}-${{ env.githubRepoName }}" \
                  -R gazelle-cloud/${{ env.githubRepoName }} \
              done
