name: template - Langingzone

on:
  workflow_call:
    inputs:
        managementGroupName:
          required: true
          type: string
        managementGroupHierarchy:
            required: true
            type: string
        location:
            default: ${{ vars.AZURE_DEFAULT_LOCATION }}
            type: string
        mainBicep:
            default: ./Landingzone/bicep/main.bicep
            type: string
        parameterFile:
            required: true
            type: string
    

jobs:
    create-landingzone:
        runs-on: ubuntu-latest
        environment: ${{ inputs.managementGroupHierarchy }}
        steps:
        - name: Checkout local
          uses: actions/checkout@v4
          with:
            path: ./

        - name: Checkout azurePlatform
          uses: actions/checkout@v4
          with:
            repository: gazelle-cloud/azurePlatform
            path: ./

        - name: get github token
          id: github-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ vars.APP_GITHUB_BIGBANG_ID }}
            private-key: ${{ secrets.APP_GITHUB_BIGBANG }}
            owner: ${{ github.repository_owner }}

        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ vars.AZURE_PLATFORM_CLIENT_ID }}
            tenant-id: ${{ vars.AZURE_TENANT_ID }}
            allow-no-subscriptions: true
            enable-AzPSSession: false

        - name: fetch JSON values
          uses: azure/cli@v2
          with:
            inlineScript: |
                params=$(jq -r 'to_entries[] | "\(.key)=\(.value)"' ${{ inputs.parameterFile }})
                IFS=$'\n'
                for item in $params
                do
                  echo $item
                  echo "$item" >> $GITHUB_ENV
                done  
                
        - name: rename subscription
          if: ${{ env.subscriptionId != null }}
          uses: azure/cli@v2
          with:
              inlineScript: |
                az account subscription rename --id ${{ env.subscriptionId}} \
                  --name ${{ env.managementGroupName }}-${{ env.labName }}-${{ env.environment}}
        
        - name: create subscription
          if: ${{ env.subscriptionId == null }}
          env:
            invoiceSection: "billingScope_${{ env.billingScope }}"

          uses: azure/cli@v2
          with:
              inlineScript: |
                newSubscription=$(az account alias create --workload 'Production' \
                  --name ${{ env.managementGroupName }}-${{ env.labName }}-${{ env.environment}} \
                  --display-name ${{ env.managementGroupName }}-${{ env.labName }}-${{ env.environment}} \
                  --billing-scope ${{ vars[env.invoiceSection] }})
                echo "Subscription Alias: $newSubscription"
                subscriptionId=$(echo $newSubscription | jq -r '.properties.subscriptionId')
                echo "subscriptionId=$subscriptionId" >> $GITHUB_ENV

        - name: move subscription
          uses: azure/cli@v2
          with:
              inlineScript: |
                az account management-group subscription add \
                  --name ${{ env.managementGroupName }}-${{ env.managementGroupHierarchy}} \
                  --subscription ${{ env.subscriptionId}}

        - name: create landingzone
          uses: azure/cli@v2
          with:
              inlineScript: |
                echo "Current directory: $(pwd)"
                params=$(jq -c . < ${{ inputs.parameterFile }})
                echo "JSON content: $params"
                
                az account set --subscription ${{ env.subscriptionId }}

                deployment=$(az stack sub create \
                --name "landingzone-init" \
                --location ${{ inputs.location }} \
                --template-file ${{ inputs.mainBicep }} \
                --parameters params=$params \
                --deny-settings-mode 'denyWriteAndDelete' \
                --action-on-unmanage 'deleteAll' \
                --deny-settings-excluded-principals '0d6eb039-8df3-4a3d-a4f4-05254113fb9a' \
                --deny-settings-excluded-actions 'Microsoft.ManagedIdentity/userAssignedIdentities/*/assign/action Microsoft.Network/virtualNetworks/subnets/write' \
                --deny-settings-apply-to-child-scopes $true \
                --yes)

                envVariables=$(echo $deployment | jq '.outputs.gitHubEnviromentVariables.value')
                echo "Deployment Outputs: $envVariables"
                echo "landingzoneInit=$(echo $envVariables | jq -c .)" >> $GITHUB_ENV

        - name: set env variables
          env:
            GH_TOKEN: ${{ steps.github-token.outputs.token }}
          run: |
              echo "create environment"

              gh api --method PUT -H "Accept: application/vnd.github+json" \
              repos/${{ github.repository_owner }}/${{ env.githubRepoName }}/environments/${{ env.environment }}
        
              deploymentOutputs=$(echo $landingzoneInit | jq .)
              echo "Deployment Outputs: $deploymentOutputs"

              keys=$(echo $deploymentOutputs | jq -r 'keys[]')
              for key in $keys; do
                value=$(echo $deploymentOutputs | jq --arg k "$key" -r '.[$k]')
                gh variable set $key \
                  --body "$value" \
                  --env ${{ env.environment }} \
                  -R "${{ github.repository_owner }}/${{ env.githubRepoName }}"
              done